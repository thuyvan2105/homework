package exception.notes;

/**
 * Compile exception >> checkedException >> "try-catch" is required
 * T·∫°i sao b·∫Øt bu·ªôc try-catch?
 * >> Nh·ªØng exception li√™n quan ƒë·∫øn x·ª≠ l√Ω file, input, output
 *    Ch·∫≥ng h·∫°n nh∆∞ ƒë·ª?c m·ªôt file, m√† file ƒë√≥ kh√¥ng t·ªìn t·∫°i th√¨ l√†m sao m√† ƒë·ª?c file ƒë√≥ ƒë∆∞·ª£c.
 *    ƒ?·ªÉ an to√†n => b·∫Øt bu·ªôc x·ª≠ l√Ω exception tr∆∞·ªõc khi ƒë·ª?c file 
 *    
 * Khi kh√¥ng c√≥ path c·ª• th·ªÉ => File s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t ·ªü "relative project path" (ƒë∆∞·ª?ng d·∫´n d·ª± √°n t∆∞∆°ng ƒë·ªëi)
 * C·ª• th·ªÉ trong lesson06-exception
   File file = new File("readme.md"); // khai b√°o, kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng
 */

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Ex05CompileException {
	public static void main(String[] args) {
		File file = createNewFile("readme.md");
		
		boolean isSuccess = write(file);
		System.out.println("isSuccess: " + isSuccess);

		System.out.println("Back to MAIN Method");

	}
	
	private static boolean write(File file) {
		FileWriter fw = null;
		try {
			fw = new FileWriter(file); 
			fw.write("Lesson06-exception\n"); // ghi n·ªôi dung v√†o file
			
			// LOG 99 exception in readme.md file
			// IOException
			write(fw, "Exception 01 ...");
			write(fw, "Exception 02 ...");
			
			// write(fw, "" + 5/0; => Arithmetic Exception
			
			write(fw, "Exception 99 ...");
			
			//fw.close(); // save and close file
			// Gi·∫£ s·ª≠ gi·ªØa ch·ª´ng d√≤ng code s·ªë 71 b·ªã exception 
			// => t·∫•t c·∫£ c√°c d√≤ng code tr∆∞·ªõc ƒë√≥ s·∫Ω ko ƒë∆∞·ª£c l∆∞u 
			// Gi·∫£i ph√°p: "finally"
			
			// Multiple exceptions:
			// + Opt1: Arithmetic Exception | IOException => con tr∆∞·ªõc cha => catch (con | cha) (from version 1.7)
			// + Opt2: Exception
			
			// More readable: Opt1 
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		} finally {
			// always run 
			// D√π c√≥ b·ªã exception hay ko (c√≥ v√†o catch hay ko), c√≥ return hay ko => lu√¥n ch·∫°y
			/*
			 * Flow: e.printStackTrace(); -> fw.close(); -> catch (IOException ex) -> return false
			 */
			try {
				fw.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		// Warning: Resource leak: 'fw' is not closed at this location
		// Khi fw = new FileWriter(file); => JAVA s·∫Ω t·∫°o connection c·ªßa file ƒë·∫øn system
		// M·ªü file ƒë√≥ ra, ki·ªÉm tra xem ghi ƒë∆∞·ª£c hay kh√¥ng 
		// D√πng h√†m write => fw.write("Lesson06-exception\n") => s·∫Ω ghi n·ªôi dung v√†o file
		// Ghi xong, "return true" lu√¥n th√¨ file v·∫´n n·∫±m ƒë√≥
		// Nghƒ©a l√†, ghi xong r·ªìi t·∫Øt app => file ƒë√≥ v·∫´n ch∆∞a ƒë∆∞·ª£c save l·∫°i m√† ƒë√£ t·∫Øt => data ko ƒëc ghi v√†o file 
		// => C·∫ßn d√πng h√†m ƒë·ªÉ save l·∫°i => D√πng fw.close();
		return true;
	}
	
	private static void write(FileWriter fw, String line) throws IOException {
		fw.write(line + "\n");
	}
	
	private static File createNewFile(String path) {
		// N·∫øu file ƒë√£ t·ªìn t·∫°i => return ch√≠nh file ƒë√≥ 
		// Ch∆∞a t·ªìn t·∫°i => t·∫°o file m·ªõi ra
		File file = new File(path); // khai b√°o
		if (!file.exists()) {
			boolean isSuccess = false;
			try {
				isSuccess = file.createNewFile(); // t·∫°o file
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.println(isSuccess);
		}
		return file;
	}

}
